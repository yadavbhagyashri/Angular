{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { Component, ComponentFactoryResolver, ViewChild } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from './auth.service';\nimport { AlertComponent } from '../shared/alert/alert.component';\nimport { PlaceholderDirective } from '../shared/placeholder/placeholder.directive';\nlet AuthComponent = class AuthComponent {\n  authService;\n  router;\n  componentFactoryResolver;\n  isLoginMode = true;\n  isLoading = false;\n  error = null;\n  alertHost;\n  closeSub;\n  constructor(authService, router, componentFactoryResolver) {\n    this.authService = authService;\n    this.router = router;\n    this.componentFactoryResolver = componentFactoryResolver;\n  }\n  onSwitchMode() {\n    this.isLoginMode = !this.isLoginMode;\n  }\n  onSubmit(form) {\n    if (!form.valid) {\n      return;\n    }\n    const email = form.value.email;\n    const password = form.value.password;\n    let authObs;\n    this.isLoading = true;\n    if (this.isLoginMode) {\n      authObs = this.authService.login(email, password);\n    } else {\n      authObs = this.authService.signup(email, password);\n    }\n    authObs.subscribe(resData => {\n      console.log(resData);\n      this.isLoading = false;\n      this.router.navigate(['/recipes']);\n    }, errorMessage => {\n      console.log(errorMessage);\n      this.error = errorMessage.error;\n      this.showErrorAlert(errorMessage);\n      this.isLoading = false;\n    });\n    form.reset();\n  }\n  onHandleError() {\n    this.error = null;\n  }\n  ngOnDestroy() {\n    if (this.closeSub) {\n      this.closeSub.unsubscribe();\n    }\n  }\n  showErrorAlert(message) {\n    // const alertCmp = new AlertComponent();\n    const alertCmpFactory = this.componentFactoryResolver.resolveComponentFactory(AlertComponent);\n    const hostViewContainerRef = this.alertHost.viewContainerRef;\n    hostViewContainerRef.clear();\n    const componentRef = hostViewContainerRef.createComponent(alertCmpFactory);\n    componentRef.instance.message = message;\n    this.closeSub = componentRef.instance.close.subscribe(() => {\n      this.closeSub.unsubscribe();\n      hostViewContainerRef.clear();\n    });\n  }\n};\n__decorate([ViewChild(PlaceholderDirective, {\n  static: false\n}), __metadata(\"design:type\", PlaceholderDirective)], AuthComponent.prototype, \"alertHost\", void 0);\nAuthComponent = __decorate([Component({\n  selector: 'app-auth',\n  templateUrl: './auth.component.html'\n}), __metadata(\"design:paramtypes\", [AuthService, Router, ComponentFactoryResolver])], AuthComponent);\nexport { AuthComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}